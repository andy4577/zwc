{"version":3,"file":"chart.cjs","sources":["../../../../../../node_modules/chart.js/dist/chart.js"],"sourcesContent":["/*!\n * Chart.js v4.1.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nexport { aL as Ticks, d as defaults } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing'\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPolarAreaController: PolarAreaController,\nPieController: PieController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height1 = chartArea.h * weight;\n            const width1 = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);\n            }\n            stack.start = x;\n            stack.placed += height1;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    active = false;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n    let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID1 = Object.keys(position)[0];\n            const value1 = position[positionAxisID1];\n            titleX = scales[positionAxisID1].getPixelForValue(value1) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = this.ticks.length;\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; ++i){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel = label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID1 = Object.keys(position)[0];\n                const value1 = position[positionAxisID1];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID1].getPixelForValue(value1));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret1 = this._getYAxisLabelAlignment(tl);\n            textAlign = ret1.textAlign;\n            x = ret1.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID1 = Object.keys(position)[0];\n                const value1 = position[positionAxisID1];\n                x = this.chart.scales[positionAxisID1].getPixelForValue(value1);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i1 = 0; i1 < local.length; i1++){\n        const plugin = local[i1];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, scaleOptions) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n    id = scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n    if (id) {\n        return id;\n    }\n    throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.1.1\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getDatasetArea(meta) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: xScale.left,\n            right: xScale.right,\n            top: yScale.top,\n            bottom: yScale.bottom\n        };\n    }\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i1 = 0, ilen1 = this.data.datasets.length; i1 < ilen1; ++i1){\n            this._updateDataset(i1, isFunction(mode) ? mode({\n                datasetIndex: i1\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta) || this.chartArea;\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter1 = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = this.options.spacing / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nLineElement: LineElement,\nPointElement: PointElement,\nBarElement: BarElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { options: { elements  } , data: { datasets  }  } = chart.config;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox1 of hitboxes){\n                if (hitbox1.col !== col) {\n                    col = hitbox1.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox1.top = top;\n                hitbox1.left += this.left + padding;\n                hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);\n                top += hitbox1.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let x = 0;\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                x += pos.x;\n                y += pos.y;\n                ++count;\n            }\n        }\n        return {\n            x: x / count,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColors = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColors.borderColor;\n            ctx.fillStyle = labelColors.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;\n            ctx.strokeStyle = labelColors.borderColor;\n            ctx.setLineDash(labelColors.borderDash || []);\n            ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n            const borderRadius = toTRBLCorners(labelColors.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColors.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColors.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        ticks.push({\n            value: Math.round((niceMin + j * spacing) * factor) / factor\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const extra = getTickBackdropHeight(opts) / 2;\n    const outerDistance = scale.drawingArea;\n    const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n        const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n        const size = labelSizes[i];\n        const y = yForAngle(pointLabelPosition.y, size.h, angle);\n        const textAlign = getTextAlignForAngle(angle);\n        const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n        items.push({\n            x: pointLabelPosition.x,\n            y,\n            textAlign,\n            left,\n            top: y,\n            right: left + size.w,\n            bottom: y + size.h\n        });\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign , left , top , right , bottom  } = scale._pointLabelItems[i];\n        const { backdropColor  } = optsAtIndex;\n        if (!isNullOrUndef(backdropColor)) {\n            const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n            const padding = toPadding(optsAtIndex.backdropPadding);\n            ctx.fillStyle = backdropColor;\n            const backdropLeft = left - padding.left;\n            const backdropTop = top - padding.top;\n            const backdropWidth = right - left + padding.width;\n            const backdropHeight = bottom - top + padding.height;\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: backdropLeft,\n                    y: backdropTop,\n                    w: backdropWidth,\n                    h: backdropHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n            }\n        }\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort((a, b)=>a - b).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"],"names":["Animator","chart","anims","date","type","callbacks","numSteps","fn","requestAnimFrame","remaining","items","i","draw","item","charts","event","cb","acc","cur","animator","transparent","interpolators","from","to","factor","c0","color","c1","Animation","cfg","target","prop","currentValue","resolve","effects","elapsed","remain","duration","loop","promises","res","rej","resolved","method","Animations","config","isObject","animationOptions","defaults","animatedProps","key","option","isArray","values","newOptions","options","resolveTargetOptions","animations","awaitAll","running","props","value","animation","properties","keys","anim","scaleClip","scale","allowedOverflow","opts","reverse","min","max","defaultClip","xScale","yScale","x","y","toClip","r","b","l","getSortedDatasetIndices","filterVisible","metasets","ilen","applyStack","stack","dsIndex","singleMode","datasetIndex","otherValue","isNumberFinite","sign","convertObjectDataToArray","data","adata","isStacked","meta","stacked","getStackKey","indexScale","valueScale","getUserBounds","minDefined","maxDefined","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","updateStacks","controller","parsed","iScale","iAxis","vAxis","index","itemStacks","visualValues","getFirstScaleId","axis","scales","createDatasetContext","parent","createContext","createDataContext","element","clearStacks","isDirectUpdateMode","mode","cloneIfNotShared","cached","shared","createStack","canStack","DatasetController","dataset","chooseId","xid","valueOrDefault","yid","rid","indexAxis","iid","vid","scaleID","unlistenArrayEvents","_data","listenArrayEvents","resetNewElements","stackChanged","oldStacked","scopeKeys","scopes","start","count","_stacked","sorted","prev","isNotInOrderComparedToPrev","labels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","range","parsedValue","_parsed","otherScale","otherMin","otherMax","_skip","ctx","elements","area","active","drawActiveElementsOnTop","context","elementType","cache","cacheKey","sharing","defined","prefixes","names","transition","sharedOptions","firstOpts","previouslySharedOptions","includeOptions","arg1","arg2","numMeta","numData","end","move","arr","removed","args","newCount","__publicField","getAllScaleValues","visibleMetas","_arrayUnique","a","computeMinSampleSize","curr","updateMinAndPrev","computeFitCategoryTraits","ruler","stackCount","thickness","size","ratio","isNullOrUndef","computeFlexCategoryTraits","pixels","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","borderProps","top","bottom","setBorderSkipped","edge","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","iAxisKey","vAxisKey","obj","bars","reset","base","horizontal","vpixels","ipixels","last","dataIndex","skipNull","val","name","barThickness","baseValue","minBarLength","floating","length","head","startPixel","endPixel","halfGrid","maxBarThickness","center","stackIndex","rects","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","startY","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","getter","toRadians","chartArea","arcs","spacing","maxSize","toPercentage","chartWeight","maxWidth","maxHeight","maxRadius","outerRadius","toDimension","innerRadius","radiusLength","animationOpts","centerX","centerY","animateScale","arc","metaData","total","formatNumber","ringWeightOffset","pointStyle","label","style","e","legendItem","legend","PolarAreaController","_parseObjectDataRadialScale","minSize","datasetStartAngle","defaultAngle","abstract","DateAdapterBase","members","adapters","binarySearch","metaset","intersect","_sorted","lookupMethod","_rlookupByKey","_lookupByKey","el","evaluateInteractionItems","position","handler","lo","hi","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","getIntersectItems","useFinalPosition","includeInvisible","_isPointInArea","getNearestRadialItems","evaluationFunc","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","inRange","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","getRelativePosition","STATIC_POSITIONS","filterByPosition","array","filterDynamicPositionByAxis","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","box","pos","stackWeight","buildStacks","layouts","wrap","_stack","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","buildLayoutBoxes","left","right","centerHorizontal","centerVertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","newWidth","newHeight","widthChanged","heightChanged","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","same","other","setBoxDims","width","height","placeBoxes","userPadding","weight","height1","width1","layoutItem","minPadding","padding","toPadding","availableWidth","availableHeight","verticalBoxes","horizontalBoxes","each","visibleVerticalBoxCount","BasePlatform","canvas","aspectRatio","listener","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","isNullOrEmpty","initCanvas","renderHeight","renderWidth","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","addListener","node","removeListener","fromNativeEvent","nodeListContains","nodeList","createAttachObserver","observer","entries","trigger","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","resize","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","w","releaseObserver","createProxyAndListen","proxy","DomPlatform","initial","proxies","getMaximumSize","_detectPlatform","_isDomSupported","Element","isNumber","final","ret","autoSkip","ticks","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","majorIndices","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","skip","offset","tickLength","maxScale","maxChart","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","majorStart","majorEnd","len","diff","reverseAlign","align","offsetFromEdge","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","getTitleHeight","fallback","font","toFont","createScaleContext","createTickContext","tick","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","positionAxisID1","value1","Scale","raw","_userMin","_userMax","_suggestedMin","_suggestedMax","finiteOrDefault","metas","callback","margins","beginAtZero","grace","sampleSize","_addGrace","samplingEnabled","reversePixels","numTicks","minRotation","maxRotation","labelRotation","tickWidth","maxLabelDiagonal","labelSizes","maxLabelWidth","maxLabelHeight","_limitValue","toDegrees","titleOpts","gridOpts","display","isHorizontal","titleHeight","widest","highest","tickPadding","angleRadians","cos","sin","labelHeight","labelWidth","isRotated","labelsBelowTicks","offsetLeft","offsetRight","paddingLeft","paddingRight","paddingTop","paddingBottom","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","lineHeight","nestedLabel","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","optionTicks","rot","h","grid","border","ticksLength","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineWidth","lineColor","borderDash","borderDashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","mirror","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","ret1","halfCount","strokeColor","strokeWidth","tickTextAlign","backdrop","labelPadding","backgroundColor","t","drawLine","p1","p2","lastLineWidth","clipArea","renderTextOptions","renderText","unclipArea","title","tz","gz","bz","axisID","fontSize","TypedRegistry","scope","override","proto","parentScope","isIChartComponent","id","registerDefaults","overrides","itemDefaults","merge","routeDefaults","routes","property","propertyParts","sourceName","sourceScope","parts","targetName","targetScope","Registry","typedRegistry","arg","reg","itemReg","registry","component","camelMethod","_capitalize","PluginService","hook","filter","descriptors","descriptor","plugin","all","plugins","allPlugins","createDescriptors","previousDescriptors","localIds","local","i1","getOpts","pluginOpts","getIndexAxis","datasetDefaults","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","axisFromPosition","determineAxis","scaleOptions","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","cachedKeys","generate","addIfFound","set","Config","datasetType","mainScope","resetCache","_scopeCache","keyLists","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","_descriptors","scriptable","indexable","version","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onAnimationProgress","getCanvas","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","debounce","maintainAspectRatio","_aspectRatio","retinaScale","clearCanvas","newSize","newRatio","scalesOptions","axisOptions","scaleOpts","updated","isRadial","scaleType","scaleClass","hasUpdated","datasets","newControllers","ControllerClass","datasetElementType","dataElementType","animsDisabled","_active","_lastEvent","existingEvents","newEvents","setsEqual","_hiddenIndices","changes","_dataChanges","datasetCount","makeSet","changeSet","noArea","ilen1","layers","clip","useClip","point","visible","listeners","platform","_add","_remove","detached","attached","enabled","prefix","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","deactivated","activated","eventFilter","_isClickEvent","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","o","toTRBL","parseBorderRadius","enableBorderRadius","toTRBLCorners","maxR","enableBorder","boundingRects","bounds","radius","skipX","skipY","_isBetween","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","borderColor","inner","outer","addRectPath","addRoundedRectPath","mouseX","mouseY","BORDER_COLORS","BACKGROUND_COLORS","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","plugin_colors","_args","colorizer","getBoxSize","labelOpts","boxHeight","boxWidth","itemsEqual","Legend","legendItems","labelFont","itemHeight","hitboxes","lineWidths","totalHeight","row","itemWidth","_itemHeight","columnSizes","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","rtl","rtlHelper","getRtlAdapter","hitbox","hitbox1","defaultColor","halfFontSize","cursor","drawLegendBox","drawOptions","drawPointLegend","yBoxTop","xBoxLeft","borderRadius","fillText","overrideTextDirection","textWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","hitBox","lh","isListened","hoveredItem","previous","sameItem","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","ci","usePointStyle","useBorderRadius","borderWidth","Title","textSize","fontOpts","createTitle","plugin_title","titleBlock","map","plugin_subtitle","positioners","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","splitNewlines","str","createTooltipItem","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","bodyLineHeight","widthPadding","maxLineWidth","line","determineYAlign","doesNotFitWithAlign","xAlign","caret","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","caretSize","caretPadding","cornerRadius","topLeft","topRight","bottomLeft","bottomRight","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","noop","labelCount","tooltipItem","invokeCallbackWithFallback","Tooltip","beforeTitle","afterTitle","lines","bodyItems","scoped","beforeFooter","afterFooter","labelColors","labelPointStyles","labelTextColors","positionAndSize","backgroundPoint","tooltipPoint","caretPosition","ptX","ptY","x3","y3","pt","titleSpacing","labelPointStyle","colorX","rtlColorX","yOffSet","colorY","drawPoint","outerX","innerX","bodySpacing","bodyAlign","displayColors","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","tooltipSize","animX","animY","opacity","hasTooltipContent","positionChanged","caretX","caretY","plugin_tooltip","addIfString","addedLabels","findOrAddLabel","_getLabelForValue","CategoryScale","added","generateTicks$1","generationOptions","dataRange","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","rad","LinearScaleBase","setMin","setMax","minSign","maxSign","maxTicksLimit","stepSize","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","minExp","exp","significand","lastTick","LogarithmicScale","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","pointLabelOpts","additionalAngle","pointPosition","plFont","_normalizeAngle","hLimits","vLimits","updateLimits","buildPointLabelItems","extra","outerDistance","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","drawPointLabels","pointLabels","backdropColor","backdropLeft","backdropTop","backdropWidth","backdropHeight","pathRadiusLine","circular","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","scaledDistance","pointLabel","distanceFromCenter","angleLines","INTERVALS","UNITS","sorter","parse","input","adapter","parser","round","isoWeekday","determineUnitForAutoTicks","minUnit","capacity","interval","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","major","ticksFromTimestamps","TimeScale","_applyBounds","timeOpts","_filterBetween","minor","weekday","hasWeekday","format","formatter","formats","minorFormat","majorFormat","offsets","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","displayFormats","exampleLabel","interpolate","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale"],"mappings":"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"}
function f(t) {
  return new Date(t).setHours(0, 0, 0, 0);
}
function D() {
  return new Date().setHours(0, 0, 0, 0);
}
function i(...t) {
  switch (t.length) {
    case 0:
      return D();
    case 1:
      return f(t[0]);
  }
  const e = new Date(0);
  return e.setFullYear(...t), e.setHours(0, 0, 0, 0);
}
function a(t, e) {
  const n = new Date(t);
  return n.setDate(n.getDate() + e);
}
function h(t, e) {
  return a(t, e * 7);
}
function l(t, e) {
  const n = new Date(t), o = n.getMonth() + e;
  let r = o % 12;
  r < 0 && (r += 12);
  const c = n.setMonth(o);
  return n.getMonth() !== r ? n.setDate(0) : c;
}
function d(t, e) {
  const n = new Date(t), o = n.getMonth(), r = n.setFullYear(n.getFullYear() + e);
  return o === 1 && n.getMonth() === 2 ? n.setDate(0) : r;
}
function u(t, e) {
  return (t - e + 7) % 7;
}
function s(t, e, n = 0) {
  const o = new Date(t).getDay();
  return a(t, u(e, n) - u(o, n));
}
function w(t) {
  const e = s(t, 4, 1), n = s(new Date(e).setMonth(0, 4), 4, 1);
  return Math.round((e - n) / 6048e5) + 1;
}
function M(t, e) {
  const n = new Date(t).getFullYear();
  return Math.floor(n / e) * e;
}
function g(t, e, n) {
  if (e !== 1 && e !== 2)
    return t;
  const o = new Date(t);
  return e === 1 ? n ? o.setMonth(o.getMonth() + 1, 0) : o.setDate(1) : n ? o.setFullYear(o.getFullYear() + 1, 0, 0) : o.setMonth(0, 1), o.setHours(0, 0, 0, 0);
}
export {
  a as addDays,
  l as addMonths,
  h as addWeeks,
  d as addYears,
  i as dateValue,
  s as dayOfTheWeekOf,
  w as getWeek,
  g as regularizeDate,
  M as startOfYearPeriod,
  f as stripTime,
  D as today
};
//# sourceMappingURL=date.js.map

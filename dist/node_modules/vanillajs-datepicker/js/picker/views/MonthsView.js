import { createTagRepeat as g, hasProperty as l, pushUnique as D } from "../../lib/utils.js";
import { dateValue as m } from "../../lib/date.js";
import { parseHTML as M } from "../../lib/dom.js";
import y from "./View.js";
function u(d, e) {
  if (!d || !d[0] || !d[1])
    return;
  const [[t, i], [r, n]] = d;
  if (!(t > e || r < e))
    return [
      t === e ? i : -1,
      r === e ? n : 12
    ];
}
class S extends y {
  constructor(e) {
    super(e, {
      id: 1,
      name: "months",
      cellClass: "month"
    });
  }
  init(e, t = !0) {
    t && (this.grid = this.element, this.element.classList.add("months", "datepicker-grid"), this.grid.appendChild(M(g("span", 12, { "data-month": (i) => i })))), super.init(e);
  }
  setOptions(e) {
    if (e.locale && (this.monthNames = e.locale.monthsShort), l(e, "minDate"))
      if (e.minDate === void 0)
        this.minYear = this.minMonth = this.minDate = void 0;
      else {
        const t = new Date(e.minDate);
        this.minYear = t.getFullYear(), this.minMonth = t.getMonth(), this.minDate = t.setDate(1);
      }
    if (l(e, "maxDate"))
      if (e.maxDate === void 0)
        this.maxYear = this.maxMonth = this.maxDate = void 0;
      else {
        const t = new Date(e.maxDate);
        this.maxYear = t.getFullYear(), this.maxMonth = t.getMonth(), this.maxDate = m(this.maxYear, this.maxMonth + 1, 0);
      }
    this.isMinView ? e.datesDisabled && (this.datesDisabled = e.datesDisabled) : this.datesDisabled = [], e.beforeShowMonth !== void 0 && (this.beforeShow = typeof e.beforeShowMonth == "function" ? e.beforeShowMonth : void 0);
  }
  updateFocus() {
    const e = new Date(this.picker.viewDate);
    this.year = e.getFullYear(), this.focused = e.getMonth();
  }
  updateSelection() {
    const { dates: e, rangepicker: t } = this.picker.datepicker;
    this.selected = e.reduce((i, r) => {
      const n = new Date(r), s = n.getFullYear(), a = n.getMonth();
      return i[s] === void 0 ? i[s] = [a] : D(i[s], a), i;
    }, {}), t && t.dates && (this.range = t.dates.map((i) => {
      const r = new Date(i);
      return isNaN(r) ? void 0 : [r.getFullYear(), r.getMonth()];
    }));
  }
  render() {
    this.disabled = this.datesDisabled.reduce((s, a) => {
      const h = new Date(a);
      return this.year === h.getFullYear() && s.push(h.getMonth()), s;
    }, []), this.picker.setViewSwitchLabel(this.year), this.picker.setPrevBtnDisabled(this.year <= this.minYear), this.picker.setNextBtnDisabled(this.year >= this.maxYear);
    const e = this.selected[this.year] || [], t = this.year < this.minYear || this.year > this.maxYear, i = this.year === this.minYear, r = this.year === this.maxYear, n = u(this.range, this.year);
    Array.from(this.grid.children).forEach((s, a) => {
      const h = s.classList, c = m(this.year, a, 1);
      if (s.className = `datepicker-cell ${this.cellClass}`, this.isMinView && (s.dataset.date = c), s.textContent = this.monthNames[a], (t || i && a < this.minMonth || r && a > this.maxMonth || this.disabled.includes(a)) && h.add("disabled"), n) {
        const [o, f] = n;
        a > o && a < f && h.add("range"), a === o && h.add("range-start"), a === f && h.add("range-end");
      }
      e.includes(a) && h.add("selected"), a === this.focused && h.add("focused"), this.beforeShow && this.performBeforeHook(s, a, c);
    });
  }
  refresh() {
    const e = this.selected[this.year] || [], [t, i] = u(this.range, this.year) || [];
    this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach((r) => {
      r.classList.remove("range", "range-start", "range-end", "selected", "focused");
    }), Array.from(this.grid.children).forEach((r, n) => {
      const s = r.classList;
      n > t && n < i && s.add("range"), n === t && s.add("range-start"), n === i && s.add("range-end"), e.includes(n) && s.add("selected"), n === this.focused && s.add("focused");
    });
  }
  refreshFocus() {
    this.grid.querySelectorAll(".focused").forEach((e) => {
      e.classList.remove("focused");
    }), this.grid.children[this.focused].classList.add("focused");
  }
}
export {
  S as default
};
//# sourceMappingURL=MonthsView.js.map

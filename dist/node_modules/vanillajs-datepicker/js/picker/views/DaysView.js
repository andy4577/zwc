import { hasProperty as n, pushUnique as g } from "../../lib/utils.js";
import { dateValue as c, dayOfTheWeekOf as f, today as u, getWeek as w, addWeeks as y, addDays as D } from "../../lib/date.js";
import { formatDate as W } from "../../lib/date-format.js";
import { parseHTML as o, showElement as m, hideElement as k } from "../../lib/dom.js";
import b from "../templates/daysTemplate.js";
import O from "../templates/calendarWeeksTemplate.js";
import S from "./View.js";
class F extends S {
  constructor(e) {
    super(e, {
      id: 0,
      name: "days",
      cellClass: "day"
    });
  }
  init(e, i = !0) {
    if (i) {
      const s = o(b).firstChild;
      this.dow = s.firstChild, this.grid = s.lastChild, this.element.appendChild(s);
    }
    super.init(e);
  }
  setOptions(e) {
    let i;
    if (n(e, "minDate") && (this.minDate = e.minDate), n(e, "maxDate") && (this.maxDate = e.maxDate), e.datesDisabled && (this.datesDisabled = e.datesDisabled), e.daysOfWeekDisabled && (this.daysOfWeekDisabled = e.daysOfWeekDisabled, i = !0), e.daysOfWeekHighlighted && (this.daysOfWeekHighlighted = e.daysOfWeekHighlighted), e.todayHighlight !== void 0 && (this.todayHighlight = e.todayHighlight), e.weekStart !== void 0 && (this.weekStart = e.weekStart, this.weekEnd = e.weekEnd, i = !0), e.locale) {
      const s = this.locale = e.locale;
      this.dayNames = s.daysMin, this.switchLabelFormat = s.titleFormat, i = !0;
    }
    if (e.beforeShowDay !== void 0 && (this.beforeShow = typeof e.beforeShowDay == "function" ? e.beforeShowDay : void 0), e.calendarWeeks !== void 0)
      if (e.calendarWeeks && !this.calendarWeeks) {
        const s = o(O).firstChild;
        this.calendarWeeks = {
          element: s,
          dow: s.firstChild,
          weeks: s.lastChild
        }, this.element.insertBefore(s, this.element.firstChild);
      } else
        this.calendarWeeks && !e.calendarWeeks && (this.element.removeChild(this.calendarWeeks.element), this.calendarWeeks = null);
    e.showDaysOfWeek !== void 0 && (e.showDaysOfWeek ? (m(this.dow), this.calendarWeeks && m(this.calendarWeeks.dow)) : (k(this.dow), this.calendarWeeks && k(this.calendarWeeks.dow))), i && Array.from(this.dow.children).forEach((s, a) => {
      const t = (this.weekStart + a) % 7;
      s.textContent = this.dayNames[t], s.className = this.daysOfWeekDisabled.includes(t) ? "dow disabled" : "dow";
    });
  }
  updateFocus() {
    const e = new Date(this.picker.viewDate), i = e.getFullYear(), s = e.getMonth(), a = c(i, s, 1), t = f(a, this.weekStart, this.weekStart);
    this.first = a, this.last = c(i, s + 1, 0), this.start = t, this.focused = this.picker.viewDate;
  }
  updateSelection() {
    const { dates: e, rangepicker: i } = this.picker.datepicker;
    this.selected = e, i && (this.range = i.dates);
  }
  render() {
    this.today = this.todayHighlight ? u() : void 0, this.disabled = [...this.datesDisabled];
    const e = W(this.focused, this.switchLabelFormat, this.locale);
    if (this.picker.setViewSwitchLabel(e), this.picker.setPrevBtnDisabled(this.first <= this.minDate), this.picker.setNextBtnDisabled(this.last >= this.maxDate), this.calendarWeeks) {
      const i = f(this.first, 1, 1);
      Array.from(this.calendarWeeks.weeks.children).forEach((s, a) => {
        s.textContent = w(y(i, a));
      });
    }
    Array.from(this.grid.children).forEach((i, s) => {
      const a = i.classList, t = D(this.start, s), d = new Date(t), r = d.getDay();
      if (i.className = `datepicker-cell ${this.cellClass}`, i.dataset.date = t, i.textContent = d.getDate(), t < this.first ? a.add("prev") : t > this.last && a.add("next"), this.today === t && a.add("today"), (t < this.minDate || t > this.maxDate || this.disabled.includes(t)) && a.add("disabled"), this.daysOfWeekDisabled.includes(r) && (a.add("disabled"), g(this.disabled, t)), this.daysOfWeekHighlighted.includes(r) && a.add("highlighted"), this.range) {
        const [h, l] = this.range;
        t > h && t < l && a.add("range"), t === h && a.add("range-start"), t === l && a.add("range-end");
      }
      this.selected.includes(t) && a.add("selected"), t === this.focused && a.add("focused"), this.beforeShow && this.performBeforeHook(i, t, t);
    });
  }
  refresh() {
    const [e, i] = this.range || [];
    this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach((s) => {
      s.classList.remove("range", "range-start", "range-end", "selected", "focused");
    }), Array.from(this.grid.children).forEach((s) => {
      const a = Number(s.dataset.date), t = s.classList;
      a > e && a < i && t.add("range"), a === e && t.add("range-start"), a === i && t.add("range-end"), this.selected.includes(a) && t.add("selected"), a === this.focused && t.add("focused");
    });
  }
  refreshFocus() {
    const e = Math.round((this.focused - this.start) / 864e5);
    this.grid.querySelectorAll(".focused").forEach((i) => {
      i.classList.remove("focused");
    }), this.grid.children[e].classList.add("focused");
  }
}
export {
  F as default
};
//# sourceMappingURL=DaysView.js.map

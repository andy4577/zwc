"use strict";const c=require("../../lib/utils.cjs"),u=require("../../lib/date.cjs"),g=require("../../lib/dom.cjs"),D=require("./View.cjs");function m(d,e){if(!d||!d[0]||!d[1])return;const[[t,i],[r,n]]=d;if(!(t>e||r<e))return[t===e?i:-1,r===e?n:12]}class M extends D{constructor(e){super(e,{id:1,name:"months",cellClass:"month"})}init(e,t=!0){t&&(this.grid=this.element,this.element.classList.add("months","datepicker-grid"),this.grid.appendChild(g.parseHTML(c.createTagRepeat("span",12,{"data-month":i=>i})))),super.init(e)}setOptions(e){if(e.locale&&(this.monthNames=e.locale.monthsShort),c.hasProperty(e,"minDate"))if(e.minDate===void 0)this.minYear=this.minMonth=this.minDate=void 0;else{const t=new Date(e.minDate);this.minYear=t.getFullYear(),this.minMonth=t.getMonth(),this.minDate=t.setDate(1)}if(c.hasProperty(e,"maxDate"))if(e.maxDate===void 0)this.maxYear=this.maxMonth=this.maxDate=void 0;else{const t=new Date(e.maxDate);this.maxYear=t.getFullYear(),this.maxMonth=t.getMonth(),this.maxDate=u.dateValue(this.maxYear,this.maxMonth+1,0)}this.isMinView?e.datesDisabled&&(this.datesDisabled=e.datesDisabled):this.datesDisabled=[],e.beforeShowMonth!==void 0&&(this.beforeShow=typeof e.beforeShowMonth=="function"?e.beforeShowMonth:void 0)}updateFocus(){const e=new Date(this.picker.viewDate);this.year=e.getFullYear(),this.focused=e.getMonth()}updateSelection(){const{dates:e,rangepicker:t}=this.picker.datepicker;this.selected=e.reduce((i,r)=>{const n=new Date(r),s=n.getFullYear(),a=n.getMonth();return i[s]===void 0?i[s]=[a]:c.pushUnique(i[s],a),i},{}),t&&t.dates&&(this.range=t.dates.map(i=>{const r=new Date(i);return isNaN(r)?void 0:[r.getFullYear(),r.getMonth()]}))}render(){this.disabled=this.datesDisabled.reduce((s,a)=>{const h=new Date(a);return this.year===h.getFullYear()&&s.push(h.getMonth()),s},[]),this.picker.setViewSwitchLabel(this.year),this.picker.setPrevBtnDisabled(this.year<=this.minYear),this.picker.setNextBtnDisabled(this.year>=this.maxYear);const e=this.selected[this.year]||[],t=this.year<this.minYear||this.year>this.maxYear,i=this.year===this.minYear,r=this.year===this.maxYear,n=m(this.range,this.year);Array.from(this.grid.children).forEach((s,a)=>{const h=s.classList,o=u.dateValue(this.year,a,1);if(s.className=`datepicker-cell ${this.cellClass}`,this.isMinView&&(s.dataset.date=o),s.textContent=this.monthNames[a],(t||i&&a<this.minMonth||r&&a>this.maxMonth||this.disabled.includes(a))&&h.add("disabled"),n){const[l,f]=n;a>l&&a<f&&h.add("range"),a===l&&h.add("range-start"),a===f&&h.add("range-end")}e.includes(a)&&h.add("selected"),a===this.focused&&h.add("focused"),this.beforeShow&&this.performBeforeHook(s,a,o)})}refresh(){const e=this.selected[this.year]||[],[t,i]=m(this.range,this.year)||[];this.grid.querySelectorAll(".range, .range-start, .range-end, .selected, .focused").forEach(r=>{r.classList.remove("range","range-start","range-end","selected","focused")}),Array.from(this.grid.children).forEach((r,n)=>{const s=r.classList;n>t&&n<i&&s.add("range"),n===t&&s.add("range-start"),n===i&&s.add("range-end"),e.includes(n)&&s.add("selected"),n===this.focused&&s.add("focused")})}refreshFocus(){this.grid.querySelectorAll(".focused").forEach(e=>{e.classList.remove("focused")}),this.grid.children[this.focused].classList.add("focused")}}module.exports=M;
//# sourceMappingURL=MonthsView.cjs.map

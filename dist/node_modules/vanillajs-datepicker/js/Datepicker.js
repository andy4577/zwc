import { stringToArray as p, lastItemOf as O, isInRange as y } from "./lib/utils.js";
import { today as v, regularizeDate as j } from "./lib/date.js";
import { formatDate as g, parseDate as b } from "./lib/date-format.js";
import { isActiveElement as F } from "./lib/dom.js";
import { registerListeners as x, unregisterListeners as L } from "./lib/event.js";
import { locales as l } from "./i18n/base-locales.js";
import A from "./options/defaultOptions.js";
import m from "./options/processOptions.js";
import I from "./picker/Picker.js";
import { triggerDatepickerEvent as M } from "./events/functions.js";
import { onKeydown as E, onFocus as V, onMousedown as S, onClickInput as C, onPaste as N } from "./events/inputFieldListeners.js";
import { onClickOutside as P } from "./events/otherListeners.js";
function w(a, t) {
  return a.map((i) => g(i, t.format, t.locale)).join(t.dateDelimiter);
}
function k(a, t, i = !1) {
  const { config: e, dates: n, rangeSideIndex: o } = a;
  if (t.length === 0)
    return i ? [] : void 0;
  let s = t.reduce((r, c) => {
    let d = b(c, e.format, e.locale);
    return d === void 0 || (d = j(d, e.pickLevel, o), y(d, e.minDate, e.maxDate) && !r.includes(d) && !e.datesDisabled.includes(d) && (e.pickLevel > 0 || !e.daysOfWeekDisabled.includes(new Date(d).getDay())) && r.push(d)), r;
  }, []);
  if (s.length !== 0)
    return e.multidate && !i && (s = s.reduce((r, c) => (n.includes(c) || r.push(c), r), n.filter((r) => !s.includes(r)))), e.maxNumberOfDates && s.length > e.maxNumberOfDates ? s.slice(e.maxNumberOfDates * -1) : s;
}
function h(a, t = 3, i = !0) {
  const { config: e, picker: n, inputField: o } = a;
  if (t & 2) {
    const s = n.active ? e.pickLevel : e.startView;
    n.update().changeView(s).render(i);
  }
  t & 1 && o && (o.value = w(a.dates, e));
}
function D(a, t, i) {
  let { clear: e, render: n, autohide: o, revert: s } = i;
  n === void 0 && (n = !0), n ? o === void 0 && (o = a.config.autohide) : o = !1;
  const r = k(a, t, e);
  !r && !s || (r && r.toString() !== a.dates.toString() ? (a.dates = r, h(a, n ? 3 : 1), M(a, "changeDate")) : h(a, 1), o && a.hide());
}
class R {
  constructor(t, i = {}, e = void 0) {
    t.datepicker = this, this.element = t;
    const n = this.config = Object.assign({
      buttonClass: i.buttonClass && String(i.buttonClass) || "button",
      container: null,
      defaultViewDate: v(),
      maxDate: void 0,
      minDate: void 0
    }, m(A, this)), o = this.inline = t.tagName !== "INPUT";
    let s;
    if (o ? n.container = t : (i.container && (n.container = i.container instanceof HTMLElement ? i.container : document.querySelector(i.container)), s = this.inputField = t, s.classList.add("datepicker-input")), e) {
      const u = e.inputs.indexOf(s), f = e.datepickers;
      if (u < 0 || u > 1 || !Array.isArray(f))
        throw Error("Invalid rangepicker object.");
      f[u] = this, Object.defineProperty(this, "rangepicker", {
        get() {
          return e;
        }
      }), Object.defineProperty(this, "rangeSideIndex", {
        get() {
          return u;
        }
      });
    }
    this._options = i, Object.assign(n, m(i, this));
    let r;
    o ? (r = p(t.dataset.date, n.dateDelimiter), delete t.dataset.date) : r = p(s.value, n.dateDelimiter), this.dates = [];
    const c = k(this, r);
    c && c.length > 0 && (this.dates = c), s && (s.value = w(this.dates, n));
    const d = this.picker = new I(this);
    if (o)
      this.show();
    else {
      const u = P.bind(null, this), f = [
        [s, "keydown", E.bind(null, this)],
        [s, "focus", V.bind(null, this)],
        [s, "mousedown", S.bind(null, this)],
        [s, "click", C.bind(null, this)],
        [s, "paste", N.bind(null, this)],
        [document, "mousedown", u],
        [document, "touchstart", u],
        [window, "resize", d.place.bind(d)]
      ];
      x(this, f);
    }
  }
  static formatDate(t, i, e) {
    return g(t, i, e && l[e] || l.en);
  }
  static parseDate(t, i, e) {
    return b(t, i, e && l[e] || l.en);
  }
  static get locales() {
    return l;
  }
  get active() {
    return !!(this.picker && this.picker.active);
  }
  get pickerElement() {
    return this.picker ? this.picker.element : void 0;
  }
  setOptions(t) {
    const i = this.picker, e = m(t, this);
    Object.assign(this._options, t), Object.assign(this.config, e), i.setOptions(e), h(this, 3);
  }
  show() {
    if (this.inputField) {
      if (this.inputField.disabled)
        return;
      !F(this.inputField) && !this.config.disableTouchKeyboard && (this._showing = !0, this.inputField.focus(), delete this._showing);
    }
    this.picker.show();
  }
  hide() {
    this.inline || (this.picker.hide(), this.picker.update().changeView(this.config.startView).render());
  }
  destroy() {
    return this.hide(), L(this), this.picker.detach(), this.inline || this.inputField.classList.remove("datepicker-input"), delete this.element.datepicker, this;
  }
  getDate(t = void 0) {
    const i = t ? (e) => g(e, t, this.config.locale) : (e) => new Date(e);
    if (this.config.multidate)
      return this.dates.map(i);
    if (this.dates.length > 0)
      return i(this.dates[0]);
  }
  setDate(...t) {
    const i = [...t], e = {}, n = O(t);
    typeof n == "object" && !Array.isArray(n) && !(n instanceof Date) && n && Object.assign(e, i.pop());
    const o = Array.isArray(i[0]) ? i[0] : i;
    D(this, o, e);
  }
  update(t = void 0) {
    if (this.inline)
      return;
    const i = Object.assign(t || {}, { clear: !0, render: !0 }), e = p(this.inputField.value, this.config.dateDelimiter);
    D(this, e, i);
  }
  refresh(t = void 0, i = !1) {
    t && typeof t != "string" && (i = t, t = void 0);
    let e;
    t === "picker" ? e = 2 : t === "input" ? e = 1 : e = 3, h(this, e, !i);
  }
  enterEditMode() {
    this.inline || !this.picker.active || this.editMode || (this.editMode = !0, this.inputField.classList.add("in-edit"));
  }
  exitEditMode(t = void 0) {
    if (this.inline || !this.editMode)
      return;
    const i = Object.assign({ update: !1 }, t);
    delete this.editMode, this.inputField.classList.remove("in-edit"), i.update && this.update(i);
  }
}
export {
  R as default
};
//# sourceMappingURL=Datepicker.js.map

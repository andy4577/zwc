import { isSingleExpression as h } from "./directive-helpers.js";
import { Directive as $, PartType as _ } from "./directive.js";
import { Directive as N, PartType as m, directive as y } from "./directive.js";
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const r = (i, t) => {
  var e, s;
  const o = i._$AN;
  if (o === void 0)
    return !1;
  for (const n of o)
    (s = (e = n)._$AO) === null || s === void 0 || s.call(e, t, !1), r(n, t);
  return !0;
}, l = (i) => {
  let t, e;
  do {
    if ((t = i._$AM) === void 0)
      break;
    e = t._$AN, e.delete(i), i = t;
  } while ((e == null ? void 0 : e.size) === 0);
}, c = (i) => {
  for (let t; t = i._$AM; i = t) {
    let e = t._$AN;
    if (e === void 0)
      t._$AN = e = /* @__PURE__ */ new Set();
    else if (e.has(i))
      break;
    e.add(i), a(t);
  }
};
function d(i) {
  this._$AN !== void 0 ? (l(this), this._$AM = i, c(this)) : this._$AM = i;
}
function A(i, t = !1, e = 0) {
  const s = this._$AH, o = this._$AN;
  if (o !== void 0 && o.size !== 0)
    if (t)
      if (Array.isArray(s))
        for (let n = e; n < s.length; n++)
          r(s[n], !1), l(s[n]);
      else
        s != null && (r(s, !1), l(s));
    else
      r(this, i);
}
const a = (i) => {
  var t, e, s, o;
  i.type == _.CHILD && ((t = (s = i)._$AP) !== null && t !== void 0 || (s._$AP = A), (e = (o = i)._$AQ) !== null && e !== void 0 || (o._$AQ = d));
};
class u extends $ {
  constructor() {
    super(...arguments), this._$AN = void 0;
  }
  _$AT(t, e, s) {
    super._$AT(t, e, s), c(this), this.isConnected = t._$AU;
  }
  _$AO(t, e = !0) {
    var s, o;
    t !== this.isConnected && (this.isConnected = t, t ? (s = this.reconnected) === null || s === void 0 || s.call(this) : (o = this.disconnected) === null || o === void 0 || o.call(this)), e && (r(this, t), l(this));
  }
  setValue(t) {
    if (h(this._$Ct))
      this._$Ct._$AI(t, this);
    else {
      const e = [...this._$Ct._$AH];
      e[this._$Ci] = t, this._$Ct._$AI(e, this, 0);
    }
  }
  disconnected() {
  }
  reconnected() {
  }
}
export {
  u as AsyncDirective,
  N as Directive,
  m as PartType,
  y as directive
};
//# sourceMappingURL=async-directive.js.map

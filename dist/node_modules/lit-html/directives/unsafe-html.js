import { nothing as s, noChange as r } from "../lit-html.js";
import { Directive as n, PartType as o, directive as a } from "../directive.js";
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
class i extends n {
  constructor(t) {
    if (super(t), this.it = s, t.type !== o.CHILD)
      throw Error(this.constructor.directiveName + "() can only be used in child bindings");
  }
  render(t) {
    if (t === s || t == null)
      return this._t = void 0, this.it = t;
    if (t === r)
      return t;
    if (typeof t != "string")
      throw Error(this.constructor.directiveName + "() called with a non-string value");
    if (t === this.it)
      return this._t;
    this.it = t;
    const e = [t];
    return e.raw = e, this._t = { _$litType$: this.constructor.resultType, strings: e, values: [] };
  }
}
i.directiveName = "unsafeHTML", i.resultType = 1;
const l = a(i);
export {
  i as UnsafeHTMLDirective,
  l as unsafeHTML
};
//# sourceMappingURL=unsafe-html.js.map

import { noChange as i } from "../lit-html.js";
import { directive as o, Directive as a, PartType as l } from "../directive.js";
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const c = o(class extends a {
  constructor(s) {
    var t;
    if (super(s), s.type !== l.ATTRIBUTE || s.name !== "style" || ((t = s.strings) === null || t === void 0 ? void 0 : t.length) > 2)
      throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.");
  }
  render(s) {
    return Object.keys(s).reduce((t, r) => {
      const e = s[r];
      return e == null ? t : t + `${r = r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, "-$&").toLowerCase()}:${e};`;
    }, "");
  }
  update(s, [t]) {
    const { style: r } = s.element;
    if (this.vt === void 0) {
      this.vt = /* @__PURE__ */ new Set();
      for (const e in t)
        this.vt.add(e);
      return this.render(t);
    }
    this.vt.forEach((e) => {
      t[e] == null && (this.vt.delete(e), e.includes("-") ? r.removeProperty(e) : r[e] = "");
    });
    for (const e in t) {
      const n = t[e];
      n != null && (this.vt.add(e), e.includes("-") ? r.setProperty(e, n) : r[e] = n);
    }
    return i;
  }
});
export {
  c as styleMap
};
//# sourceMappingURL=style-map.js.map

{"version":3,"file":"zwc-stage.cjs","sources":["../../../../../../src/components/zwc-stage/zwc-stage.ts"],"sourcesContent":["import { Base } from '../base/base';\r\n\r\nimport { customElement, property } from 'lit/decorators.js';\r\nimport { html, TemplateResult } from 'lit';\r\nimport { classMap } from 'lit/directives/class-map.js';\r\n\r\n// components\r\nimport '../zwc-pictogram';\r\nimport '../zwc-promise-label';\r\nimport type { IPromise } from '../zwc-promise-label';\r\n\r\ntype StageType = 'image' | 'shape' | 'pictogram';\r\n\r\n@customElement('zwc-stage')\r\nexport class ZwcStage extends Base {\r\n  @property({\r\n    type: String,\r\n    converter: {\r\n      fromAttribute(value) {\r\n        if (\r\n          !(value === 'image' || value === 'shape' || value === 'pictogram')\r\n        ) {\r\n          console.error(\r\n            `<zwc-stage 'type=\"${value}\" ...> - is not valid attribute value, please provide \"image | shape | pictogram\"`,\r\n          );\r\n        }\r\n        return String(value);\r\n      },\r\n    },\r\n  })\r\n  type: StageType = 'image';\r\n\r\n  /**\r\n   * Sets image on left side when type=\"shape\"\r\n   */\r\n  @property({ type: Boolean })\r\n  reversed = false;\r\n\r\n  /** Sets inverted class on element */\r\n  @property({ type: Boolean })\r\n  inverted = false;\r\n\r\n  /** Align text left when type=\"shape\" */\r\n  @property({ type: Boolean, attribute: 'left-aligned' })\r\n  leftAligned = false;\r\n\r\n  /** Sets background class */\r\n  @property({ type: String })\r\n  background = '';\r\n\r\n  @property({ type: String })\r\n  preline = 'Pre line';\r\n\r\n  @property({ type: String })\r\n  headline = 'Head Line';\r\n\r\n  @property({ type: String })\r\n  pictogram = 'career-analysis';\r\n\r\n  @property({ type: Boolean, attribute: 'pictogram-dark' })\r\n  pictogramDark = false;\r\n\r\n  /** Sets src att when type=\"image | shape\" */\r\n  @property({ type: String, attribute: 'image-src' })\r\n  imageSrc = '';\r\n\r\n  @property({ type: String, attribute: 'promise-title' })\r\n  promiseTitle = 'Green';\r\n\r\n  @property({ type: String, attribute: 'promise-subtitle' })\r\n  promiseSubtitle = 'Promise';\r\n\r\n  @property({ type: String, attribute: 'promise-type' })\r\n  promiseType: IPromise = 'none';\r\n\r\n  get getImageSrc() {\r\n    if (this.type !== 'pictogram' && this.imageSrc === '') {\r\n      console.error(`image-src=\"value\" needs to be set.`);\r\n    }\r\n    return this.imageSrc;\r\n  }\r\n\r\n  protected renderPromise(): TemplateResult | string {\r\n    return this.promiseType !== 'none'\r\n      ? html` <zwc-promise\r\n          .title=${this.promiseTitle}\r\n          .subtitle=${this.promiseSubtitle}\r\n          .promise=${this.promiseType}\r\n          .inverted=${this.inverted}\r\n        ></zwc-promise>`\r\n      : '';\r\n  }\r\n\r\n  protected render(): TemplateResult {\r\n    const classes = {\r\n      ['stage-banner']: true,\r\n      [`stage-banner--${this.type}`]: true,\r\n      [`${this.background}`]: true,\r\n      reversed: this.reversed,\r\n      inverted: this.inverted,\r\n      'stage-banner--left': this.leftAligned,\r\n    };\r\n\r\n    return html`\r\n      <div class=${classMap(classes)}>\r\n        ${this.renderPromise()}\r\n        <div class=\"stage-banner-container\">\r\n          <div class=\"stage-banner-image\">\r\n            ${this.type === 'pictogram'\r\n              ? html`<zwc-pictogram\r\n                  .pictogram=\"${this.pictogram}\"\r\n                  ?dark=\"${this.pictogramDark}\"\r\n                ></zwc-pictogram>`\r\n              : html`<img src=${this.getImageSrc} alt=\"image\" /> `}\r\n          </div>\r\n          <div class=\"stage-banner-content\">\r\n            <p><strong>${this.preline}</strong></p>\r\n            <h1>${this.headline}</h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'zwc-stage': ZwcStage;\r\n  }\r\n}\r\n"],"names":["ZwcStage","Base","html","classes","classMap","__decorateClass","property","value","customElement"],"mappings":"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"}
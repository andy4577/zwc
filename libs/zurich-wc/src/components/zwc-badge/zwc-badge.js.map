{"version":3,"file":"zwc-badge.js","sources":["../../../../../../src/components/zwc-badge/zwc-badge.ts"],"sourcesContent":["import { customElement, property, state } from 'lit/decorators.js';\r\nimport { html, css, CSSResultGroup, LitElement, TemplateResult } from 'lit';\r\nimport { classMap } from 'lit/directives/class-map.js';\r\nimport { styleMap } from 'lit/directives/style-map.js';\r\nimport { getColorVar } from '../../utils';\r\nimport '../zwc-icon';\r\n\r\ntype Status = 'primary' | 'dark' | 'success' | 'danger' | 'info' | 'unknown';\r\n// 'unknown' = 'disabled' in App components\r\n\r\n@customElement('zwc-badge')\r\nexport class ZwcBadge extends LitElement {\r\n  static override styles?: CSSResultGroup | undefined = [\r\n    css`\r\n      *,\r\n      *::before,\r\n      *::after {\r\n        box-sizing: border-box;\r\n      }\r\n\r\n      :host {\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n      }\r\n      .badge {\r\n        display: inline-flex;\r\n        flex-direction: row;\r\n        justify-content: center;\r\n        align-items: center;\r\n        gap: 4px;\r\n        text-align: center;\r\n        border: 1px solid var(--zwc-badge-border, transparent);\r\n        border-radius: 26px;\r\n        height: 22px;\r\n        font-size: 12px;\r\n        line-height: 22px;\r\n        padding: 0px 8px;\r\n        font-family: var(--zwc-badge-font, var(--f-sans-medium));\r\n        font-weight: 500;\r\n        min-width: 22px;\r\n        box-shadow: 0 1px 5px 0 rgb(0 0 0 / 7%), 0 2px 2px 0 rgb(0 0 0 / 5%),\r\n          0 3px 1px -2px rgb(0 0 0 / 3%);\r\n        color: var(--zwc-badge-color, var(--c-white));\r\n        background-color: var(--zwc-badge-background, var(--c-zurichblue));\r\n      }\r\n\r\n      .primary {\r\n        background-color: var(--c-theme-primary);\r\n      }\r\n      .dark {\r\n        background-color: var(--c-theme-secondary);\r\n      }\r\n      .success {\r\n        background-color: var(--c-theme-success);\r\n      }\r\n      .danger {\r\n        background-color: var(--c-theme-danger);\r\n      }\r\n      .info {\r\n        background-color: var(--c-theme-info);\r\n      }\r\n      .unknown {\r\n        background-color: var(--c-theme-unknown);\r\n      }\r\n\r\n      .lg {\r\n        height: 26px;\r\n        font-size: 14px;\r\n        line-height: 28px;\r\n        min-width: 28px;\r\n        padding: 0 10px;\r\n      }\r\n      .sm {\r\n        height: 18px;\r\n        min-width: 18px;\r\n        line-height: 18px;\r\n        padding: 0 6px;\r\n      }\r\n      .xs {\r\n        height: 14px;\r\n        font-size: 10px;\r\n        line-height: 14px;\r\n        min-width: 14px;\r\n        padding: 0 4px;\r\n      }\r\n\r\n      .no-padding {\r\n        padding: 0px;\r\n        aspect-ratio: 1 / 1;\r\n      }\r\n    `,\r\n  ];\r\n\r\n  @property()\r\n  status: Status = 'primary';\r\n\r\n  @property({ type: String, attribute: 'text' })\r\n  text = '';\r\n\r\n  @property({ type: String })\r\n  color = undefined;\r\n\r\n  @property({ type: String })\r\n  backgroundColor = undefined;\r\n\r\n  @property({ type: String })\r\n  size = '';\r\n\r\n  @state()\r\n  hasPadding = true;\r\n\r\n  render(): TemplateResult {\r\n    const classes = {\r\n      badge: true,\r\n      [`${this.status}`]: this.status,\r\n      [`${this.size}`]: this.size,\r\n      'no-padding': !this.hasPadding,\r\n    };\r\n\r\n    const styles = {\r\n      color: this.color ? getColorVar(this.color) : null,\r\n      backgroundColor: this.backgroundColor\r\n        ? getColorVar(this.backgroundColor)\r\n        : null,\r\n    };\r\n\r\n    return html`\r\n      <span style=\"${styleMap(styles)}\" class=\"${classMap(classes)}\">\r\n        <slot name=\"icon\" part=\"icon\"></slot>\r\n        <slot @slotchange=${this.handleDefaultSlot}></slot>\r\n      </span>\r\n    `;\r\n  }\r\n\r\n  protected handleDefaultSlot(e: Event): void {\r\n    if (e) {\r\n      const childNodes = (e.target as HTMLSlotElement).assignedNodes({\r\n        flatten: true,\r\n      });\r\n      const textArray = childNodes.map(node => this.sanitize(node));\r\n      const purged = textArray.filter(Boolean);\r\n      this.hasPadding = purged[0] ? purged[0].length > 1 : false;\r\n    }\r\n  }\r\n\r\n  sanitize(node: Node): string | undefined {\r\n    return node.textContent?.trim();\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'zwc-badge': ZwcBadge;\r\n  }\r\n}\r\n"],"names":["ZwcBadge","LitElement","classes","styles","getColorVar","html","styleMap","classMap","purged","node","_a","css","__decorateClass","property","state","customElement"],"mappings":";;;;;;;;;;;;AAWa,IAAAA,IAAN,cAAuBC,EAAW;AAAA,EAAlC,cAAA;AAAA,UAAA,GAAA,SAAA,GAoFY,KAAA,SAAA,WAGV,KAAA,OAAA,IAGC,KAAA,QAAA,QAGU,KAAA,kBAAA,QAGX,KAAA,OAAA,IAGM,KAAA,aAAA;AAAA,EAAA;AAAA,EAEb,SAAyB;AACvB,UAAMC,IAAU;AAAA,MACd,OAAO;AAAA,MACP,CAAC,GAAG,KAAK,WAAW,KAAK;AAAA,MACzB,CAAC,GAAG,KAAK,SAAS,KAAK;AAAA,MACvB,cAAc,CAAC,KAAK;AAAA,IAAA,GAGhBC,IAAS;AAAA,MACb,OAAO,KAAK,QAAQC,EAAY,KAAK,KAAK,IAAI;AAAA,MAC9C,iBAAiB,KAAK,kBAClBA,EAAY,KAAK,eAAe,IAChC;AAAA,IAAA;AAGC,WAAAC;AAAA,qBACUC,EAASH,CAAM,aAAaI,EAASL,CAAO;AAAA;AAAA,4BAErC,KAAK;AAAA;AAAA;AAAA,EAG/B;AAAA,EAEU,kBAAkB,GAAgB;AAC1C,QAAI,GAAG;AAKC,YAAAM,IAJc,EAAE,OAA2B,cAAc;AAAA,QAC7D,SAAS;AAAA,MAAA,CACV,EAC4B,IAAI,OAAQ,KAAK,SAASC,CAAI,CAAC,EACnC,OAAO,OAAO;AACvC,WAAK,aAAaD,EAAO,KAAKA,EAAO,GAAG,SAAS,IAAI;AAAA,IACvD;AAAA,EACF;AAAA,EAEA,SAASC,GAAgC;;AAChC,YAAAC,IAAAD,EAAK,gBAAL,gBAAAC,EAAkB;AAAA,EAC3B;AACF;AA1IaV,EACK,SAAsC;AAAA,EACpDW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+EF;AAGAC,EAAA;AAAA,EADCC,EAAS;AAAA,GAnFCb,EAoFX,WAAA,UAAA,CAAA;AAGAY,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAQ,WAAW,QAAQ;AAAA,GAtFlCb,EAuFX,WAAA,QAAA,CAAA;AAGAY,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAQ;AAAA,GAzFfb,EA0FX,WAAA,SAAA,CAAA;AAGAY,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAQ;AAAA,GA5Ffb,EA6FX,WAAA,mBAAA,CAAA;AAGAY,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAQ;AAAA,GA/Ffb,EAgGX,WAAA,QAAA,CAAA;AAGAY,EAAA;AAAA,EADCE,EAAM;AAAA,GAlGId,EAmGX,WAAA,cAAA,CAAA;AAnGWA,IAANY,EAAA;AAAA,EADNG,EAAc,WAAW;AAAA,GACbf,CAAA;"}
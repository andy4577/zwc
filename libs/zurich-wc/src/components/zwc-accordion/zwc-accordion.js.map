{"version":3,"file":"zwc-accordion.js","sources":["../../../../../../src/components/zwc-accordion/zwc-accordion.ts"],"sourcesContent":["import { customElement, property, queryAll } from 'lit/decorators.js';\r\nimport { html, TemplateResult } from 'lit';\r\nimport { classMap } from 'lit/directives/class-map.js';\r\nimport { repeat } from 'lit/directives/repeat.js';\r\n\r\nimport { Base } from '../base'\r\nimport { slideToggle } from '../../utils/animation';\r\n\r\ntype Position = 'left' | 'right';\r\ninterface AccordionItem {\r\n  key: string;\r\n  title: string;\r\n  bodyText: string;\r\n}\r\n\r\n@customElement('zwc-accordion')\r\nexport class ZwcAccordion extends Base {\r\n  @property({ type: String, attribute: 'icon-position' })\r\n  iconPosition: Position = 'left';\r\n\r\n  @property({ type: Boolean, attribute: 'open-multiple' })\r\n  openMultiple = false;\r\n\r\n  @property({\r\n    type: Object,\r\n    converter: {\r\n      fromAttribute(value: string | null) {\r\n        let data: AccordionItem[];\r\n        if (value) {\r\n          try {\r\n            data = JSON.parse(value);\r\n            return data;\r\n          } catch (e) {\r\n            console.error(e);\r\n          }\r\n        }\r\n        return null;\r\n      },\r\n    },\r\n  })\r\n  data: AccordionItem[] = [];\r\n\r\n  @queryAll('div.active')\r\n  activeDivs!: NodeListOf<HTMLDivElement>;\r\n\r\n  protected render(): TemplateResult {\r\n    const classes = {\r\n      accordion: true,\r\n      [`accordion--icon-${this.iconPosition}`]: true,\r\n    };\r\n\r\n    return html`\r\n      <div\r\n        class=${classMap(classes)}\r\n        ?data-open-multiple=${this.openMultiple}\r\n        @click=${this.clickHandler}\r\n      >\r\n        ${repeat(\r\n          this.data,\r\n          item => item.key,\r\n          item => this.renderAccordionItem(item),\r\n        )}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private renderAccordionItem(item: AccordionItem): TemplateResult {\r\n    const { key, title, bodyText } = item;\r\n\r\n    return html`\r\n      <div class=\"accordion-item\">\r\n        <h5 class=\"accordion-header\">\r\n          <button\r\n            class=\"accordion-button\"\r\n            type=\"button\"\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"item-${key}\"\r\n          >\r\n            ${title}\r\n          </button>\r\n        </h5>\r\n        <div id=\"item-${key}\" class=\"accordion-body\">\r\n          <p>${bodyText}</p>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private clickHandler(e: Event): void {\r\n    if (e.target === null || (e.target as HTMLElement)?.nodeName !== 'BUTTON')\r\n      return;\r\n\r\n    const button = e.target as HTMLButtonElement;\r\n    const accordionItem = this.getAccordionItem(button);\r\n\r\n    if (accordionItem?.classList.contains('active')) {\r\n      this.closeItem(accordionItem, button);\r\n    } else if (accordionItem) {\r\n      if (!this.openMultiple) {\r\n        if (this.activeDivs.length > 0) {\r\n          this.closeAll(this.activeDivs);\r\n        }\r\n      }\r\n\r\n      this.openItem(accordionItem, button);\r\n    }\r\n  }\r\n\r\n  private closeAll(divsActive: NodeListOf<HTMLDivElement>) {\r\n    divsActive.forEach(node => {\r\n      const button = node.querySelector(\r\n        '.accordion-button',\r\n      ) as HTMLButtonElement;\r\n\r\n      if (button) {\r\n        this.closeItem(node, button);\r\n      }\r\n    });\r\n  }\r\n\r\n  private closeItem(accordionItem: HTMLDivElement, button: HTMLButtonElement) {\r\n    button.setAttribute('area-expanded', 'false');\r\n    accordionItem.classList.remove('active');\r\n\r\n    const controlsId = button.getAttribute('aria-controls');\r\n    let accordionBody: HTMLDivElement | null;\r\n\r\n    if (accordionItem) {\r\n      accordionBody = accordionItem.querySelector(`#${controlsId}`);\r\n\r\n      if (accordionBody) {\r\n        slideToggle(accordionBody, 'up', 32);\r\n      }\r\n    }\r\n  }\r\n\r\n  private openItem(\r\n    accordionItem: HTMLDivElement,\r\n    button: HTMLButtonElement,\r\n  ): void {\r\n    button.setAttribute('aria-expanded', 'true');\r\n    accordionItem.classList.add('active');\r\n\r\n    const controlsId = button.getAttribute('aria-controls');\r\n    let accordionBody: HTMLDivElement | null;\r\n\r\n    if (accordionItem) {\r\n      accordionBody = accordionItem.querySelector(`#${controlsId}`);\r\n\r\n      if (accordionBody) {\r\n        slideToggle(accordionBody, 'down', 32);\r\n      }\r\n    }\r\n  }\r\n\r\n  private getAccordionItem(item: HTMLElement): HTMLDivElement | null {\r\n    return item.parentNode?.parentNode as HTMLDivElement;\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'zwc-accordion': ZwcAccordion;\r\n  }\r\n}\r\n"],"names":["ZwcAccordion","Base","classes","html","classMap","repeat","item","key","title","bodyText","_a","button","accordionItem","divsActive","node","controlsId","accordionBody","slideToggle","__decorateClass","property","value","data","e","queryAll","customElement"],"mappings":"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"}
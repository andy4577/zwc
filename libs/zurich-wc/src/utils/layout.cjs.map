{"version":3,"file":"layout.cjs","sources":["../../../../../src/utils/layout.ts"],"sourcesContent":["const BREAKPOINT_XS = 480;\r\nconst IS_SCROLLABLE_LEFT = 'has-scroll-left';\r\nconst IS_SCROLLABLE_RIGHT = 'has-scroll-right';\r\nconst HAS_SCROLLER = 'has-scroller';\r\n\r\n/**\r\n * Returns true if device is < BREAKPOINT_XS\r\n *\r\n * @returns {boolean} - is device mobile\r\n */\r\nexport const isMobile = () => window.innerWidth < BREAKPOINT_XS;\r\n\r\n/**\r\n * If given element is outside visible viewport, call native scrollIntoView to scroll to the element\r\n *\r\n * @param {HTMLElement} el - element to scroll to\r\n */\r\nexport const scrollToElement = (el: HTMLElement) => {\r\n  const parent = el.parentNode as HTMLElement;\r\n  const { offsetTop, scrollTop, clientHeight } = parent;\r\n  const overTop = el.offsetTop - offsetTop < scrollTop;\r\n  const overBottom =\r\n    el.offsetTop - offsetTop + el.clientHeight > scrollTop + clientHeight;\r\n  const alignWithTop = overTop && !overBottom;\r\n\r\n  if (overTop || overBottom) {\r\n    el.scrollIntoView(alignWithTop);\r\n  }\r\n};\r\n\r\n/**\r\n * Toggles parent classes based on child horizontal-scroll position\r\n *\r\n * - For hiding/showing horizontal scroll arrows ยก\r\n *\r\n * @param {HTMLElement} wrapper - wrapping parent element\r\n * @param {HTMLElement} el - scrolling child element\r\n */\r\nexport const toggleHorizontalScrollArrows = (\r\n  wrapper: HTMLElement,\r\n  el: HTMLElement,\r\n) => {\r\n  const contentScrollLeft = el.scrollLeft;\r\n  const contentWidth = el.scrollWidth;\r\n  const contentInnerWidth = el.offsetWidth;\r\n\r\n  if (contentWidth > contentInnerWidth) {\r\n    wrapper.classList.add(HAS_SCROLLER);\r\n  } else {\r\n    wrapper.classList.remove(HAS_SCROLLER);\r\n  }\r\n\r\n  if (contentScrollLeft > 0) {\r\n    wrapper.classList.add(IS_SCROLLABLE_LEFT);\r\n  } else {\r\n    wrapper.classList.remove(IS_SCROLLABLE_LEFT);\r\n  }\r\n\r\n  if (contentScrollLeft + contentInnerWidth >= contentWidth) {\r\n    wrapper.classList.remove(IS_SCROLLABLE_RIGHT);\r\n  } else {\r\n    wrapper.classList.add(IS_SCROLLABLE_RIGHT);\r\n  }\r\n};\r\n\r\n/**\r\n * get the closest parent element with a matching selector\r\n *\r\n * @param elem\r\n * @param selector\r\n * @returns {null|*}\r\n */\r\nexport const getClosest = (elem: any, selector: any) => {\r\n  for (; elem && elem !== document; elem = elem.parentNode) {\r\n    if (elem.matches(selector)) return elem;\r\n  }\r\n  return null;\r\n};\r\n"],"names":["IS_SCROLLABLE_LEFT","IS_SCROLLABLE_RIGHT","HAS_SCROLLER","toggleHorizontalScrollArrows","wrapper","el","contentScrollLeft","contentWidth","contentInnerWidth"],"mappings":"4GACA,MAAMA,EAAqB,kBACrBC,EAAsB,mBACtBC,EAAe,eAmCRC,EAA+B,CAC1CC,EACAC,IACG,CACH,MAAMC,EAAoBD,EAAG,WACvBE,EAAeF,EAAG,YAClBG,EAAoBH,EAAG,YAEzBE,EAAeC,EACTJ,EAAA,UAAU,IAAIF,CAAY,EAE1BE,EAAA,UAAU,OAAOF,CAAY,EAGnCI,EAAoB,EACdF,EAAA,UAAU,IAAIJ,CAAkB,EAEhCI,EAAA,UAAU,OAAOJ,CAAkB,EAGzCM,EAAoBE,GAAqBD,EACnCH,EAAA,UAAU,OAAOH,CAAmB,EAEpCG,EAAA,UAAU,IAAIH,CAAmB,CAE7C"}